<?php

declare(strict_types=1);
// lib/php/plugins/auth.php 20150101 - 20230622
// Copyright (C) 2015-2023 Mark Constable <markc@renta.net> (AGPL-3.0)

/**
 * Handle user authentication.
 *
 * @package hcp
 * @author  Mark Constable <markc@renta.net>
 * @license https://www.gnu.org/licenses/agpl-3.0.html AGPL-3.0
 */
class Plugins_Auth extends Plugin
{
    /**
     * The length of One-Time Passwords (OTPs) generated by this class.
     */
    public const OTP_LENGTH = 10;

    /**
     * The number of seconds for which the "remember me" cookie will be valid.
     */
    public const REMEMBER_ME_EXP = 604800; // 7 days;

    /**
     * The name of the database table in which user accounts are stored.
     */
    protected string $tbl = 'accounts';

    /**
     * The input parameters passed to this class. These are typically passed in
     * via the URL or via a form submission.
     */
    public array $inp = [
        'acl'       => null,
        'grp'       => null,
        'id'        => null,
        'login'     => '',
        'otp'       => '',
        'passwd1'   => '',
        'passwd2'   => '',
        'remember'  => '',
        'webpw'     => '',
    ];

    /**
     * Handle the "Create" page for forgotten passwords.
     *
     * This page generates a new one time password key (OTP) for the user and
     * sends it to them via email. It also updates the user's record in the
     * database with the new OTP and a timestamp for when it was sent.
     *
     * @return string HTML content for the page
     */
    public function create(): string
    {
        $u = $this->inp['login']; // user login email ID

        if (util::is_post()) {
            // Validate the input data
            if (filter_var($u, FILTER_VALIDATE_EMAIL)) {
                // Find the user in the database
                if ($usr = db::read('id,acl', 'login', $u, '', 'one')) {
                    // Check if the account is disabled
                    if (9 != $usr['acl']) {
                        // Generate a new OTP
                        $newpass = util::genpw(self::OTP_LENGTH);

                        // Send the OTP to the user via email
                        if ($this->mail_forgotpw($u, $newpass, 'From: ' . $this->g->cfg['email'])) {
                            // Update the user's record in the database with the new OTP and a timestamp
                            db::update([
                                'otp' => $newpass,
                                'otpttl' => time(),
                            ], [['id', '=', $usr['id']]]);
                            // Log the success message
                            util::log('Sent reset password key for "' . $u . '" so please check your mailbox and click on the supplied link.', 'success');
                        } else {
                            // Log the error message
                            util::log('Problem sending message to ' . $u, 'danger');
                        }
                        // Redirect the user to the main page
                        util::redirect($this->g->cfg['self'] . '?o=' . $this->g->in['o'] . '&m=list');
                    } else {
                        // Log the error message
                        util::log('Account is disabled, contact your System Administrator');
                    }
                } else {
                    // Log the error message
                    util::log('User does not exist');
                }
            } else {
                // Log the error message
                util::log('You must provide a valid email address');
            }
        }

        // Return the HTML content for the page
        return $this->g->t->create(['login' => $u]);
    }

    /**
     * Login page
     *
     * This function renders the login page form and handles the form submission.
     * If the user is already logged in, it redirects to the main page.
     * If the user is not logged in, it checks the provided email and password
     * against the database, and if they match, logs in the user and redirects to
     * the main page.
     *
     * @return string The login page form.
     */
    public function list(): string
    {
        // Check if the user is already logged in
        if (util::is_usr()) {
            // Redirect to the main page
            util::redirect($this->g->cfg['self']);
        }

        // Get the email and password from the form
        [$u, $p] = [$this->inp['login'] ?? '', $this->inp['webpw'] ?? ''];

        // Check if the email and password are valid
        if ($u && $p) {
            // Get the user data from the database
            if ($usr = db::read('id,grp,acl,login,fname,lname,webpw,cookie', 'login', $u, '', 'one')) {
                // Extract the user data
                extract($usr);

                // Check if the account is disabled
                if (9 !== $acl) {
                    // Check if the password is valid
                    if (password_verify(html_entity_decode($p, ENT_QUOTES, 'UTF-8'), $webpw)) {
                        // Check if the user wants to remember the login
                        if ($this->inp['remember']) {
                            // Generate a unique token for the cookie
                            $uniq = util::random_token(32);
                            // Update the cookie in the database
                            db::update(['cookie' => $uniq], [['id', '=', $id]]);
                            // Set the cookie in the browser
                            util::put_cookie('remember', $uniq, self::REMEMBER_ME_EXP);
                        }

                        // Log the user in
                        $_SESSION['usr'] = $usr;
                        util::log($login . ' is now logged in', 'success');

                        // Check if the user is an administrator
                        if (0 === (int) $acl) {
                            // Set the administrator flag
                            $_SESSION['adm'] = $id;
                        }

                        // Set the current method
                        $_SESSION['m'] = 'list';

                        // Redirect to the main page
                        util::redirect($this->g->cfg['self']);
                    } else {
                        // Invalid password
                        util::log('Invalid Email Or Password');
                    }
                } else {
                    // Account is disabled
                    util::log('Account is disabled, contact your System Administrator');
                }
            } else {
                // User not found
                util::log('Invalid Email Or Password');
            }
        }

        // Return the login page form
        return $this->g->t->list(['login' => $u]);
    }

    /**
     * Handles the password reset form submission.
     *
     * This method is called when the user submits the password reset form.
     * It checks if the user is logged in or if the one time password key has
     * expired. Then it updates the user's password in the database and logs
     * the user in. If the one time password key has expired, it displays an
     * error message.
     *
     * @return string The HTML for the password reset form.
     */
    public function update(): string
    {
        if (!(util::is_usr() || isset($_SESSION['resetpw']))) {
            util::log('Session expired! Please login and try again.');
            util::relist();
        }

        $i = (util::is_usr()) ? $_SESSION['usr']['id'] : $_SESSION['resetpw']['usr']['id'];
        $u = (util::is_usr()) ? $_SESSION['usr']['login'] : $_SESSION['resetpw']['usr']['login'];

        if (util::is_post()) {
            if ($usr = db::read('login,acl,otpttl', 'id', (string) $i, '', 'one')) {
                $p1 = html_entity_decode($this->inp['passwd1'], ENT_QUOTES, 'UTF-8');
                $p2 = html_entity_decode($this->inp['passwd2'], ENT_QUOTES, 'UTF-8');
                if (util::chkpw($p1, $p2)) {
                    if (util::is_usr() or ($usr['otpttl'] && (($usr['otpttl'] + 3600) > time()))) {
                        if (!is_null($usr['acl'])) {
                            if (db::update([
                                'webpw' => password_hash($p1, PASSWORD_DEFAULT),
                                'otp' => '',
                                'otpttl' => 0,
                                'updated' => date('Y-m-d H:i:s'),
                            ], [['id', '=', $i]])) {
                                util::log('Password reset for ' . $usr['login'], 'success');
                                if (util::is_usr()) {
                                    util::redirect($this->g->cfg['self']);
                                } else {
                                    unset($_SESSION['resetpw']);
                                    util::relist();
                                }
                            } else {
                                util::log('Problem updating database');
                            }
                        } else {
                            util::log($usr['login'] . ' is not allowed access');
                        }
                    } else {
                        util::log('Your one time password key has expired');
                    }
                }
            } else {
                util::log('User does not exist');
            }
        }

        return $this->g->t->update(['id' => $i, 'login' => $u]);
    }

    /**
     * Delete the user session variables and redirect to the home page.
     *
     * @return string Empty string, even though it's not used.
     */
    public function delete(): ?string
    {
        // If the user is logged in, delete their session variables
        if (util::is_usr()) {
            // Get the user's login and ID
            $u = $_SESSION['usr']['login'];
            $id = $_SESSION['usr']['id'];

            // If the user is also an admin, delete the admin session variable
            if (isset($_SESSION['adm']) and $_SESSION['usr']['id'] === $_SESSION['adm']) {
                unset($_SESSION['adm']);
            }

            // Delete the user session variable
            unset($_SESSION['usr']);

            // Delete the user's remember cookie
            if (isset($_COOKIE['remember'])) {
                // Update the database to set the cookie to blank
                db::update(['cookie' => ''], [['id', '=', $id]]);
                // Set the cookie to expire in the past
                $this->setcookie('remember', '', strtotime('-1 hour', 0));
            }

            // Log the user out
            util::log($u . ' is now logged out', 'success');
        }

        // Redirect the user to the home page
        util::redirect($this->g->cfg['self']);

        // Return an empty string, even though it's not used
        return ''; // unused, just to satisfy ?string
    }

     /**
     * Handles the password reset form submission.
     *
     * This method is called when the user submits the password reset form.
     * It checks if the user is logged in or if the one time password key has
     * expired. Then it updates the user's password in the database and logs
     * the user in. If the one time password key has expired, it displays an
     * error message.
     *
     * @return string The HTML for the password reset form.
     */
    public function resetpw(): ?string
    {
        // Get the OTP from the input data
        $otp = html_entity_decode($this->inp['otp']);

        // Check if the OTP is the correct length
        if (self::OTP_LENGTH === strlen($otp)) {
            // Find the user in the database
            if ($usr = db::read('id,acl,login,otp,otpttl', 'otp', $otp, '', 'one')) {
                // Extract the user's data
                extract($usr);

                // Check if the OTP has expired
                if ($otpttl && (($otpttl + 3600) > time())) {
                    // Check if the user is suspended
                    if (3 !== $acl) {
                        // Store the user's data in the session
                        $_SESSION['resetpw'] = ['usr' => $usr];

                        // Update the user's data in the database
                        return $this->g->t->update(['id' => $id, 'login' => $login]);
                    } else {
                        // Log an error message
                        util::log($login . ' is not allowed access');
                    }
                } else {
                    // Log an error message
                    util::log('Your one time password key has expired');
                }
            } else {
                // Log an error message
                util::log('Your one time password key no longer exists');
            }
        } else {
            // Log an error message
            util::log('Incorrect one time password key');
        }

        // Redirect the user to the home page
        util::redirect($this->g->cfg['self']);
    }

    /**
     * Send an email to the user with a new OTP to reset their password
     *
     * @param string $email    The email address of the user
     * @param string $newpass  The new OTP to send to the user
     * @param string $headers  Additional headers to send with the email
     * @return bool            Whether the email was successfully sent
     */
    private function mail_forgotpw(string $email, string $newpass, string $headers = ''): bool
    {
        // Generate the base URL used in the email
        $host = $_SERVER['REQUEST_SCHEME'] . '://'
            . $this->g->cfg['host']
            . $this->g->cfg['self'];

        // Generate the email message
        $msg = <<<EOT
Here is your new OTP (one time password) key that is valid for one hour.

Please click on the link below and continue with reseting your password.

If you did not request this action then please ignore this message.

{$host}?o=auth&m=resetpw&otp={$newpass}
EOT;

        // Send the email
        return mail(
            "{$email}",
            'Reset password for ' . $this->g->cfg['host'],
            $msg,
            $headers
        );
    }
}
